# Simple template for custom secret detector
# Use a unique identifier.
id: @myorg:unique-id

# Is the detector enabled? If no, the detector will not be loaded (default is enabled: yes)
enabled: yes
# Standard secret type: 'artifactory_apikey' ... 'pypirc'
# May use generic ones like: 'apikey', 'api_token', 'access_key', 'basic_auth_url', 'high_entropy',
# 'password', 'private_key', 'symmetric_key', or 'other' as fallback.
type: other

# If not given, the default, configurable GenericSecretDetector will be used.
#classname: pkg.to.MySecretDetector
description: What the detector looks for

# The severity or importance of the secrets detected here
# One of critical, high, low, info
severity: high
# Default likelihood given to each secret finding by this detector
# One of highest, high, medium, low
confidence: medium
# if generic: yes, secrets found will be tagged as generic.
# Generic secrets are discarded when another non-generic ('specific') detector finds the same secret.
generic: no

# quickFilters are strings that will be checked in the input, to quickly filter the secret before it is processed by patterns.
# Useful if the pattern is complex, to improve detection time.
quickFilters:
  - string1
  - string2

# Each condition block may specify:
#   regex (pattern, ignorecase, exact, keyGroup and secretGroup)
#   minlen (minimum number of characters)
#   minEntropy (minimum Shannon Entropy, in bits per byte). Between 0 and 8.
#   base64 (if true, the item should be base-64 encoded. If true, the value is decoded for other checks)
#   uri (if true, match only URL)
#   uuid4 (if true, match UUID 4)
#   ascii (if true, match only printable ASCII)
#   keyGroup, secretGroup: The pattern group to assign to the key or value of the secret.
#     This is useful for use a pattern to extract the group that really conveys the item.

# Conditions on the key part of the entry.
# Typically, the key is the variable or property the secret is assigned to.
key:
  regex:
    pattern: '\b_?(secret|credential|auth)_?\b'
    ignorecase: no
    exact: no # default. Set to yes for full match
    keyGroup: 0 # no specific regex group

# Conditions on the value (potential secret holder) part of the entry.
#
value:
  # Pattern
  regex:
    pattern: '[a-zA-Z0-9_.+/~$-]{14,1022}'
    ignorecase: no # default
    exact: no # default. Set to yes for full match
    secretGroup: 0 # no specific regex group
  # Alternative or additional conditions
  ascii: no
  uri: no
  base64: no
  uuid4: no
  minlen: 16 #
  minEntropy: 3
  # (optional) Patterns to discard. Useful for removing false positives.
  ignore:
    - '\$\{[a-zA-Z0-9_\-]+}'

# If the key and value hove greater similarity than this, the entry ignored.
# Useful to avoid false positives like MY_TOKEN = ${MY_TOKEN}
# similarity is a number between 0 and 1 (1 is exact match)
# Comment it out so that it does not check for similarity between key and value
similarity: 0.35


# (Optional) check for key identifier
# Credentials often go in pairs.
# The secret part of the credential often needs an ID (account name, key ID, username...) for remediation
secretId:
  regex:
    pattern: '\b_?(secret|credential|auth)_?\b'
    ignorecase: no
    exact: no # default. Set to yes for full match
  # Alternative or additional conditions
  ascii: no
  uri: no
  base64: no
  uuid4: no
  minlen: 16 #
  minEntropy: 3

# (Optional) check for secret URL, with same layout.
# secretUrl could be a service host or URL that could be used for verification or remediation.
#secretUrl:

# (Optional) specific configuration properties for the detector
properties:
  configProp: 'some'
  configProp2: ['pat1', 'pat2']
  configProp3: true
  configProp4: 32

# Example verifier, remove if verification is not possible
verifier:
  className: com.depsdoctor.secrets.scanner.detector.verifier.ApiVerifier
  # action: do_nothing | ignore_when_not_verified | set_info_when_not_verified |
  #         increase_severity_when_verified | decrease_severity_when_not_verified
  action: set_info_when_not_verified
  properties:
    # The api endpoint url
    host: https://host/api/v1/action
    authHeaderName: Authorization
    tokenPrefix: token
    # HTTP codes that the api should return when the token is valid
    httpCodes: [ 200 ]

# Additional patterns could be added here. Each pattern may contain the following properties:
patterns:
#  - name: pattern1
#    enabled: yes
#    fileTypes: [json]
#    fileRegex: '(\.json)$'
#    quickFilters: []
#    key:
#      regex:
#        pattern: '\b_?(secret|credential|auth)_?\b'
#        ignorecase: no
#        exact: no # default. Set to yes for full match
#        keyGroup: 0 # no specific regex group
#    value:
#      regex:
#        pattern: '[a-zA-Z0-9_.+/~$-]{14,1022}'
#        ignorecase: no # default
#        exact: no # default. Set to yes for full match
#        secretGroup: 0 # no specific regex group
#      ascii: no
#      uri: no
#      base64: no
#      uuid4: no
#      minlen: 16 #
#      minEntropy: 3
#      ignore:
#        - '\$\{[a-zA-Z0-9_\-]+}'
#    secretId:
#    secretUrl:
#    withEntryTags:
#    verifier:
#    obfuscate: true

# Further detectors may be written in the same file, separated by ---.
# ----
# id: ...
# ...
